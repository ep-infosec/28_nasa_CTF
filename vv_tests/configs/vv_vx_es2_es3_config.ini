################################
# Note - This config file provides an example configuration to run CTF as a CFS tool inside a CFS workspace.
#    It configures two SP0 cfs targets: target_1 and target_2
#        Please ensure that the appropriate fields are set below, specifically for the [cfs] section to match your
#        CFS workspace layout.
################################


#################################
# CTF Core Configuration
#################################

[core]

# Global verification timeout for any "verify_required" CTF instructions
# Unit: Seconds if using generic system time manager)
ctf_verification_timeout = 5.0

# Global polling period for any "verify_required" CTF insturction.
# Defines how often to run verification commands until verification either
#   passes or timeout
# Unit: Seconds if using generic system time manager)
ctf_verification_poll_period = 0.5

# Reset plugins between scripts? This is useful if
# scripts assume a fresh state of CFS/Trick_CFS
# If set to false, plugins will not shutdown/re-initialize
# between scripts
reset_plugins_between_scripts = false

# How long to wait between test scripts
delay_between_scripts = 2.0

# End test on fail?
end_test_on_fail = false

# Path to additional plugins to be loaded/used by CTF.
# All plugins within that directory will be loaded unless
# disabled explicitly in `disabled_plugins`.
# Note - The additional plugin directory requires a unique name
#        in order to now shadow any CTF top-level directories.
#        Do not name the directory 'plugins', 'lib' or other folder
#        names within the CTF repo.
additional_plugins_path = 

# Disabled plugins (directory name of plugin). Comma-separated
disabled_plugins = 

# Ignored plugin test instructions. Comma-separated
ignored_instructions = 

#################################
# CTF logging
#################################

[logging]

# Output directory for CTF scripts
results_output_dir = ./CTF_Results

# Filename for CTF Log
ctf_log_file = CTF_Log_File.log

# Generate a json version of the regression_results_summary (true)
# in addition to the text file version
json_results = true

# What level of logging?
# ERROR : only show error logs - very minimal output
# INFO :  only show  info, warning, error, and critical logs
# DEBUG:  show all logs!
log_level = DEBUG

#################################
# ccsds options
#################################

[ccsds]

# Name of the CCSDS Manager to be used by CTF for obtaining CCSDS Message Info
# Note - CTF will search for CCSDS managers under plugins/cfs/ccsds. Ensure that
#        the reader class is defined there.
# By default, CTF uses the CCDDExportReader which parses JSON output from the
# provided CCDD scripts under tools/
#
# Other readers can be implemented to handle specific types of CCSDS exports
# such as CSV, XTCE, etc... The custom readers should make use of the interface
# defined in the CCSDSInterface file.

# Header Info Included in CCSDS Exports?
CCSDS_header_info_included = false

####
# This python module contains the definitions of header types to be exposed in the CCSDS plugin.
# These classes will be used by the CFS plugin to construct command and telemetry packets with
# the appropriate header formats.
####
CCSDS_header_path = ./plugins/ccsds_plugin/cfe/ccsds_v2/ccsds_v2.py

#################################
# Base settings for cfs
#################################

[cfs]

# CFS workspace directory. All cfs paths will be relative to workspace dir.
#######
#
# Note - The CFS Workspace Directory is the CFS project root directory
#        which the remaining configuration fields will utilize.
#
# Note - Other sections with the same fields can be defined as their own CFS targets to be registered.
#        example: [my_custom_cfs_target]
#                 cfs_protocol = local # REQUIRED for each target
#                 <other fields if needed>
#######

workspace_dir = ~/sample_cfs_workspace

# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = sp0

# Build the CFS project?
build_cfs = false

# Build directory for the CFS project
cfs_build_dir = ${cfs:workspace_dir}

# Build command to run
cfs_build_cmd = make distclean; make TARGET=VXWORKS install

# Run directory for the CFS project
cfs_run_dir = ${cfs:workspace_dir}/build/exe/lx_es1

# Executable to run within the cfs_run_dir
cfs_exe = core-lx_es1

# Include CFS UDP port in arg (-p portNum)?
cfs_port_arg = false

# Additional arguments
cfs_run_args = 

# File name where CFS output will be saved
# The target name will be prepended to ensure unique files
cfs_output_file = cfs_stdout.txt

# Automatically remove continuous checks once they fail
# Not doing so may flood the output with error messages
remove_continuous_on_fail = true

# CCSDS Data Directory
####
# This directory contains the command and telemetry definitions in JSON format.
# These definitions are used for CTF to command/receive telemetry, as well as
# used by the editor for auto-suggestion features.
####

CCSDS_data_dir = ${cfs:workspace_dir}/ccdd/json

# Log CCSDS Import Process (Logs all messages parsed from CCSDS Data Directory)
log_ccsds_imports = false

# Name of the target in CCSDS data files
CCSDS_target = set2

# What endianess is the target machine
endianess_of_target = big

# Output directory for CFS EVS
evs_log_file = evs_event_msgs.log

# Run in debug mode using GDB?
cfs_debug = false

# Log every telemetry packet received?
telemetry_debug = false

# Run in a seperate terminal window as CTF?
cfs_run_in_xterm = false

#ip address of the target system (1/A)
cfs_target_ip = 192.168.22.129

#CI commanding port
cmd_udp_port = 5012

# Set tlm_udp_port to 0 if you want the os to
# choose the port.
# If you want to manually set tlm_udp_port than set it equal to
# the port you want to use
tlm_udp_port = 0

# Do you want to use TO or DIAG. Needs to be the exact name of the class to be used
# tlm_app_choice = DiagApi
tlm_app_choice = ToApi

# What CCSDS version
ccsds_ver = 2

# How long to look back in the evs messages to validate
# Note - Setting this value to 0 means CheckEvent packet must
#        be received *while* polling that instruction.
#        Setting this value to X will allow CTF to validate
#        events received with the past X time-units, as well
#        as new events packets
evs_messages_clear_after_time = 5

# Name of MID to collect cfe EVS long messages
evs_event_mid_name = CFE_EVS_LONG_EVENT_MSG_MID

# Name of MID to collect cfe EVS short messages
evs_short_event_mid_name = CFE_EVS_SHORT_EVENT_MSG_MID

# Execution path on the target
cfs_exe_path = /ram0

# The main function to start cfs
cfs_entry_point = CFE_PSP_Main

# The SP0 will be rebooted before starting the test.
reboot = true

# The time to delay before trying to send commands to CFS.
cfs_startup_time = 5

# Log the stdout text for each command sent to the SP0.
log_stdout = true

# Command to be issued when CFS is shut down
stop_command = reboot()

# Manual software loading will be skipped during startup
auto_start = False

# The ram drive path to be deleted. It is only needed, when '-RPR' argument is not included in cfs_run_args.
# It only applies on Linux targets.
cfs_ram_drive_path = /dev/shm/osal:RAM

#################################
#
#################################

[ssh]

# Command timeout for the execution plugin
command_timeout = 60

# Print stdout while command is running?
print_stdout = false

# Log stdout when command complete?
log_stdout = true

#################################
# Override settings for cfs vx_es2  (SP0-1A)
#################################

[cfs_vx_es2]

workspace_dir = ~/sample_cfs_workspace

# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = sp0

# Build the CFS project?
build_cfs = false

# Build directory for the CFS project
cfs_build_dir = ${cfs:workspace_dir}

# Include CFS UDP port in arg (-p portNum)?
cfs_port_arg = false

# Additional arguments
cfs_run_args = 

# File name where CFS output will be saved
# The target name will be prepended to ensure unique files
cfs_output_file = cfs_stdout.txt

# Do you want to use TO or DIAG. Needs to be the exact name of the class to be used
# tlm_app_choice = DiagApi
tlm_app_choice = ToApi

# Build command to run
cfs_build_cmd = make; make TARGET=VXWORKS install

# Run directory for the CFS project
cfs_run_dir = ${cfs:workspace_dir}/build/exe/vx_es2

# Executable to run within the cfs_run_dir
cfs_exe = core-vx_es2.exe

# Execution path on the target
cfs_exe_path = /ram0

# The main function to start cfs
cfs_entry_point = CFE_PSP_Main

# What endianess is the target machine
endianess_of_target = big

# Output directory for CFS EVS
evs_log_file = evs_event_msgs.log

# How long to look back in the evs messages to validate
# Note - Setting this value to 0 means CheckEvent packet must
#        be received *while* polling that instruction.
#        Setting this value to X will allow CTF to validate
#        events received with the past X time-units, as well
#        as new events packets
evs_messages_clear_after_time = 5

#ip address of the target system (1/A)
cfs_target_ip = 192.168.22.129

#CI commanding port
cmd_udp_port = 5012

# Name of the target in CCSDS data files
CCSDS_target = set2

# What CCSDS version
ccsds_ver = 2

# Name of MID to collect cfe EVS long messages
evs_event_mid_name = CFE_EVS_LONG_EVENT_MSG_MID

# Name of MID to collect cfe EVS short messages
evs_short_event_mid_name = CFE_EVS_SHORT_EVENT_MSG_MID

# The SP0 will be rebooted before starting the test.
reboot = true

# The time to delay before trying to send commands to CFS.
cfs_startup_time = 5

# Log the stdout text for each command sent to the SP0.
log_stdout = true

# Command to be issued when CFS is shut down
stop_command = reboot()

# Command to be issued before a reboot when connecting to the SP0
# Note that this command is only issued if reboot = True
pre_reboot_command = cmd rm -r /ffx0/URM/*

# Manual software loading will be skipped during startup
auto_start = False

# Log every telemetry packet received? 
telemetry_debug = false

#################################
# Override settings for cfs vx_es3
#################################

[cfs_vx_es3]

# Run directory for the CFS project
cfs_run_dir = ${cfs:workspace_dir}/build/exe/vx_es3

# Executable to run within the cfs_run_dir
cfs_exe = core-vx_es3.exe

#ip address of the target system (1/B)
cfs_target_ip = 192.168.22.130

# CI commanding port
cmd_udp_port = 5012

# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = sp0

# Name of the target in CCSDS data files
CCSDS_target = set1

# Command to be issued when CFS is shut down
stop_command = reboot()

# Command to be issued before a reboot when connecting to the SP0
# Note that this command is only issued if reboot = True
pre_reboot_command = cmd rm -r /ffx0/URM/*

# Manual software loading will be skipped during startup
auto_start = False

# Log every telemetry packet received? 
telemetry_debug = false
