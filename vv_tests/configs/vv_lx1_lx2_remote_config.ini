################################
# Note - This file is intended for use with particular V&V test cases.
#    It configures two remote cfs targets: cfs_LX1 and cfs_LX2
#	 Please ensure that the appropriate fields are set below, specifically for the [cfs] section to match your
#	 CFS workspace layout.
################################


#################################
# CTF Core Configuration
#################################

[core]

# Global verification timeout for any "verify_required" CTF instructions
# Unit: Seconds if using generic system time manager)
ctf_verification_timeout = 5.0

# Global polling period for any "verify_required" CTF insturction.
# Defines how often to run verification commands until verification either
#   passes or timeout
# Unit: Seconds if using generic system time manager)
ctf_verification_poll_period = 0.5

# Reset plugins between scripts? This is useful if
# scripts assume a fresh state of CFS/Trick_CFS
# If set to false, plugins will not shutdown/re-initialize
# between scripts
reset_plugins_between_scripts = true

# How long to wait between test scripts
delay_between_scripts = 1.0

# End test on fail?
end_test_on_fail = false

# Path to additional plugins to be loaded/used by CTF.
# All plugins within that directory will be loaded unless
# disabled explicitly in `disabled_plugins`.
# Note - The additional plugin directory requires a unique name
#        in order to now shadow any CTF top-level directories.
#        Do not name the directory 'plugins', 'lib' or other folder
#        names within the CTF repo.
additional_plugins_path = 

# Disabled plugins (directory name of plugin). Comma-separated
disabled_plugins = 

# Ignored plugin test instructions. Comma-separated
ignored_instructions = 

#################################
# CTF logging
#################################

[logging]

# Output directory for CTF scripts. Relative to directory CTF is launched from.
results_output_dir = ./CTF_Results

# Filename for CTF Log
ctf_log_file = CTF_Log_File.log

# Generate a json version of the regression_results_summary (true)
# in addition to the text file version
json_results = True

# What level of logging?
# ERROR : only show error logs - very minimal output
# INFO :  only show  info, warning, error, and critical logs
# DEBUG:  show all logs!
log_level = DEBUG

#################################
# ccsds options
#################################
[ccsds]
# Header Info Included in CCSDS Exports?
CCSDS_header_info_included = false

####
# This python module contains the definitions of header types to be exposed in the CCSDS plugin.
# These classes will be used by the CFS plugin to construct command and telemetry packets with
# the appropriate header formats.
####
CCSDS_header_path = ./plugins/ccsds_plugin/cfe/ccsds_v2/ccsds_v2.py


#################################
# Base settings for cfs
#################################
[cfs]

workspace_dir = ~/sample_cfs_workspace

# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = local

# Build the CFS project?
build_cfs = false

# Build directory for the CFS project
cfs_build_dir = ${cfs:workspace_dir}

# Build command to run
cfs_build_cmd = make; make install

# Run directory for the CFS project
cfs_run_dir = ${cfs:workspace_dir}/build/exe/lx1

# Executable to run within the cfs_run_dir
cfs_exe = core-lx1

# Include CFS UDP port in arg (-p portNum)?
cfs_port_arg = False

# Additional arguments
cfs_run_args = 

# File name where CFS output will be saved
# The target name will be prepended to ensure unique files
cfs_output_file = cfs_stdout.txt

# Automatically remove continuous checks once they fail
# Not doing so may flood the output with error messages
remove_continuous_on_fail = True

# CCSDS Data Directory
CCSDS_data_dir = ${cfs:workspace_dir}/ccdd/json

# Log CCSDS Import Process (Logs all messages parsed from CCSDS Data Directory)
log_ccsds_imports = true

# Name of the target in CCSDS data files
CCSDS_target = set1

# What endianess is the target machine
endianess_of_target = little

# Output directory for CFS EVS
evs_log_file = evs_event_msgs.log

# Run in debug mode using GDB?
cfs_debug = false

# Run in a seperate terminal window as CTF?
cfs_run_in_xterm = True

#ip address of the target system
cfs_target_ip = 127.0.0.1

# Do you want to use TO or DIAG. Needs to be the exact name of the class to be used
# tlm_app_choice = DiagApi
tlm_app_choice = ToApi

# What CCSDS version
ccsds_ver = 2

# How long to look back in the evs messages to validate
# Note - Setting this value to 0 means CheckEvent packet must
#        be received *while* polling that instruction.
#        Setting this value to X will allow CTF to validate
#        events received with the past X time-units, as well
#        as new events packets
evs_messages_clear_after_time = 5

# Name of MID to collect cfe EVS long messages
evs_event_mid_name = CFE_EVS_LONG_EVENT_MSG_MID

# Name of MID to collect cfe EVS short messages
evs_short_event_mid_name = CFE_EVS_SHORT_EVENT_MSG_MID

# The ram drive path to be deleted. It is only needed, when '-RPR' argument is not included in cfs_run_args.
# It only applies on Linux targets.
cfs_ram_drive_path = /dev/shm/osal:RAM

# Log every telemetry packet received? 
telemetry_debug = false

#################################
# Override settings for cfs_lx1
#################################

[cfs_lx1]

# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = ssh

# Destination IP/hostname
destination = localhost

# Run directory for the CFS project
cfs_run_dir = ${cfs:workspace_dir}/build/exe/lx1

# Executable to run within the cfs_run_dir
cfs_exe = core-lx1

# CI commanding port
cmd_udp_port = 5010

tlm_udp_port = 5011

# Log every telemetry packet received? 
telemetry_debug = false

#################################
# Override settings for cfs_lx2
#################################

[cfs_lx2]

# cfs protocol setting either:
# local  (local host)
# ssh     (ssh to host)
# sp0    (sp0 host)
cfs_protocol = ssh

# Destination IP/hostname
destination = localhost

# Run directory for the CFS project
cfs_run_dir = ${cfs:workspace_dir}/build/exe/lx2

# Executable to run within the cfs_run_dir
cfs_exe = core-lx2

# Name of the target in CCSDS data files
CCSDS_target = set2

# CI commanding port
cmd_udp_port = 6010

tlm_udp_port = 6011

# Log every telemetry packet received? 
telemetry_debug = false

[ssh]

# Command timeout for the execution plugin
command_timeout = 60

# Print stdout while command is running?
print_stdout = False

# Log stdout when command complete?
log_stdout = True
